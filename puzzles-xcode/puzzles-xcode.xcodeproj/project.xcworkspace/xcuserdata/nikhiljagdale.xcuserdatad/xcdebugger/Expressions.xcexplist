<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "CentreOfGravity(int*, int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "print():main.cpp">
      </ContextState>
      <ContextState
         contextName = "Solution::shortestDistance(std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "words[i]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Graph::DFS(int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "isSafe(int (*) [4], int, int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "insert(trie*, char*):main.cpp">
      </ContextState>
      <ContextState
         contextName = "minWindow(char const*, char const*, int&amp;, int&amp;):main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "needToFind[98]">
            </PersistentString>
            <PersistentString
               value = "hasFound[97]">
            </PersistentString>
            <PersistentString
               value = "needToFind[97]">
            </PersistentString>
            <PersistentString
               value = "hasFound[98]">
            </PersistentString>
            <PersistentString
               value = "hasFound[99]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "binary_search(int*, int, int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "solveNQUtil(int (*) [4], int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "findClosest(int*, int, int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "main:main.cpp">
      </ContextState>
      <ContextState
         contextName = "countDecodingDP(char*, int):main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "count[i]">
            </PersistentString>
            <PersistentString
               value = "digits[i-2]">
            </PersistentString>
            <PersistentString
               value = "digits[i-1]">
            </PersistentString>
            <PersistentString
               value = "count[i-1]">
            </PersistentString>
            <PersistentString
               value = "count[i-2]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "minCoinsBottomUp(int, int*, int):main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "temp[j]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "SolveSudoku(int (*) [4]):main.cpp">
      </ContextState>
      <ContextState
         contextName = "reverse_string(char*):main.cpp">
      </ContextState>
      <ContextState
         contextName = "countDecoding(char*, int):main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "digits">
            </PersistentString>
            <PersistentString
               value = "digits[n-2]">
            </PersistentString>
            <PersistentString
               value = "digits[n-1]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "subsets(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;):main.cpp">
      </ContextState>
      <ContextState
         contextName = "Solution::genSubsets(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;, int, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;, std::__1::vector&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; &gt; &gt;&amp;):main.cpp">
      </ContextState>
      <ContextState
         contextName = "Solution::subsets(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;):main.cpp">
      </ContextState>
      <ContextState
         contextName = "maxArea(int*, int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "knapSack(int, int*, int*, int):main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "wt[i-1]">
            </PersistentString>
            <PersistentString
               value = "K[1][1]">
            </PersistentString>
            <PersistentString
               value = "K[i-1][w]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::minMeetingRooms1(std::__1::vector&lt;Interval, std::__1::allocator&lt;Interval&gt; &gt;&amp;):main.cpp">
      </ContextState>
      <ContextState
         contextName = "BST::closestBST(double):main.cpp">
      </ContextState>
      <ContextState
         contextName = "BST::closestNodeBST(BST::Node*, double):main.cpp">
      </ContextState>
      <ContextState
         contextName = "fib_dp(int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "Solution&lt;char&gt;::permute_helper(std::__1::vector&lt;std::__1::vector&lt;char, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;char, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, std::__1::vector&lt;char, std::__1::allocator&lt;char&gt; &gt;, int, int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "reversed_string(char const*):main.cpp">
      </ContextState>
      <ContextState
         contextName = "Solution::wordBreak(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unordered_set&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;&amp;):main.cpp">
      </ContextState>
      <ContextState
         contextName = "MyStack&lt;int&gt;::push(int):main.cpp">
      </ContextState>
      <ContextState
         contextName = "Graph::DFSUtil(int, bool*):main.cpp">
      </ContextState>
   </ContextStates>
</VariablesViewState>
