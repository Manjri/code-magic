/* fread example: read an entire file */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
/*
#define EVEN_NUM(N) (uint16_t)buffer[N] << 4 | buffer[N+1] >> 4
#define ODD_NUM(N) (uint16_t)((buffer[N] & 0x0F) << 8) | (buffer[N+1])
*/

#define EVEN_NUM(N) (uint16_t) (buf[N] << 4 & 0xFF)  | (buf[N+1] >> 4 & 0x0F)
#define ODD_NUM(N) (uint16_t)((buf[N] & 0x0F) << 8) | (buf[N+1])


void swap(uint16_t* data, int i, int j)
{
    uint16_t temp = data[j];
    data[j] = data[i];
    data[i] = temp;
}


void sort(uint16_t* data, int len)
{
    int i,j;

    for(i = 1; i < len; i++)
    {
        for(j = i; j > 0; j--)
        {
            if(data[j] < data[j-1])
                swap(data, j-1, j);
            else
                break;
        }
    }

}


/*
Input file contains 12 bit sensor data that needs to be processed in the Output File 
as follows:
    - Start with “--Sorted Max 32 Values--"
    - The 32 largest values in the file, one value per line.  Duplicates are allowed 
    if a large value appears multiple times.  The list should be sorted smallest to largest.
    - Output “--Last 32 Values--" on its own line
    - The last 32 values read, one per line. They should appear in the order they were read.  
    The last value read from the file will appear last.

    If there are fewer than 32 values in the file then whatever is read should be output

Arguments:
    InputFile: Contains raw sensor data (12 bit numbers)
    OutputFile: Processed data as per requirement above
*/

void processData(char* inputFileName, char* outputFileName)
{
    FILE* inputFile;
    FILE* outputFile;
    long fileSize;
    const char* header1 = "--Sorted Max 32 Values--";
    const char* header2 = "--Last 32 Values--";

    char* buf;          /* Array where each element holds a byte of data from 
                        the input file stream */
    uint16_t* data;     /* Array where each element holds a 12-bit number 
                        representing sensor data in the order in which it is read */

    uint16_t* dataCopy; /* for storing the sorted array, causwe we dont want an inplace sorting*/

    size_t result;      /* Result of fread */
    int i;
    int numDataElements;/* Total number of 12 bit elements */
    int byteCount;      /* used for counting the number of bytes read (starts with 0th byte) */

    byteCount = 0;

    // Open the file and get its size in bytes
    inputFile = fopen(inputFileName, "rb");
    if(!inputFile)
    {
        printf("\nFile Error !!!");
        exit(1);
    }

    fseek(inputFile, 0, SEEK_END);
    fileSize = ftell(inputFile);
    rewind(inputFile);

    // buf should be equal to the file size in bytes
    buf = (char*) malloc(sizeof(char)*fileSize);
    
    if(!buf)
    {
        printf("\nMemory Error !!!");
        exit(2);
    }

    result = fread(buf, 1, fileSize, inputFile);

    if(result != fileSize)
    {
        printf("\File Read Error !!!");
        exit(3);
    }

    /* data is a uint16 size array containing our 12-bit sensor values
    hence its size is file size/3 + 3 */
    
    //malloc should take in size as a multiple of 8 to avoid heap error 
    data = (uint16_t*) malloc(sizeof(char) * 2 * fileSize); 

    if(!data)
    {
        printf("\nMemory Error !!!");
        exit(2);
    }

    // start writing to the file
    outputFile = fopen(outputFileName, "w");
    fprintf(outputFile,"%s\n",header1);

    /* Start grabbing bytes in buf and form a 12 bit word in the order of reading */
    for(i=0; byteCount < fileSize; i++)
    {
        // Read even position 12-bit numbers in the stream (example:0th, 2nd, 4th data ...)
        if(i%2 == 0)
        {
            data[i] = EVEN_NUM(byteCount);
            byteCount += 1;
        }
        // Read odd position 12-bit numbers in the stream (example:0th, 2nd, 4th data ...)
        else
        {
            data[i] = ODD_NUM(byteCount);
            byteCount +=2;
        }

        //fprintf(outputFile, "%d\n", data[i]);
    }
    numDataElements = i;
    
    // Sorting...        
    dataCopy = (uint16_t*) malloc(sizeof(char) * 2 * fileSize); 

    memcpy(dataCopy, data, sizeof(char) * 2 * fileSize);

    sort(dataCopy, numDataElements);

    // Write the sorted max 32 numbers
    // Also handle the case where the numbers read are fewer than 32

    if(numDataElements >= 32 )
    {
        for(i = 32; i > 0; i--)
        {
            fprintf(outputFile, "%d\n", dataCopy[numDataElements-i]);
        }
    }
    else
    {
        for(i = 0; i < numDataElements; i++)
        {
            fprintf(outputFile, "%d\n", dataCopy[i]);
        }
    }


    // Write the last 32 values encountered in the stream
    // Also handle the case where the numbers read are fewer than 32

    fprintf(outputFile,"%s\n",header2);

    if(numDataElements >= 32 )
    {
        for(i = 32; i > 0; i--)
        {
            fprintf(outputFile, "%d\n", data[numDataElements-i]);
        }
    }
    else
    {
        for(i = 0; i < numDataElements; i++)
        {
            fprintf(outputFile, "%d\n", data[i]);
        }
    }


    free(buf);
    free(data);
    free(dataCopy);
    fclose(inputFile);
    fclose(outputFile);
    
}


int main(int argc, char* argv[])
{
    char* inputFileName;
    char* outputFileName;
    
    if(argc != 3)
        printf("\nIncorrect arguments passed !!\nCorrect Format is: sensor_read.exe <InputFile Name With Path> <OutputFile Name With Path>\n\n");

    inputFileName = argv[1];
    outputFileName = argv[2];

    processData(inputFileName, outputFileName);

    return 0;
}

#if 0

int main () {
  FILE * pFile;
  long lSize;
  char * buffer;
  uint16_t* data;
  size_t result;
  uint16_t temp_low8;
  uint16_t temp_high4;
  uint16_t data_0, data_1, data_2;
  int i;
  int count = 0;
  int oldcount;

  pFile = fopen ( "C:\\Users\\njagdale\\Downloads\\applesensorexercise\\test2.bin" , "rb" );
  if (pFile==NULL) {fputs ("File error",stderr); exit (1);}

  // obtain file size:
  fseek (pFile , 0 , SEEK_END);
  lSize = ftell (pFile);
  rewind (pFile);

  // allocate memory to contain the whole file:
  buffer = (char*) malloc (sizeof(char)*lSize);
  if (buffer == NULL) {fputs ("Memory error",stderr); exit (2);}

  // copy the file into the buffer:
  result = fread (buffer,1,lSize,pFile);
  if (result != lSize) {fputs ("Reading error",stderr); exit (3);}

  /* the whole file is now loaded in the memory buffer. */

    


  /*
  buffer[0] --> 2 bytes
  buffer[1] --> 2 bytes
  to extract the first 3 bytes (12 bits) we can store them in a 16 bit integer with the top 4 bits 0
  uint16_t data[0] = buffer[0]
  we need only the first 4 bits of buffer[1]
  char temp = 0x0F & buffer[1]
  right shift it
  temp << 4
  buffer[1] >> 8
  
  data[0] = 
  */

  /*
  temp_low8 = buffer[0];
  temp_high4 = buffer[1] >> 4;

  data_0 = temp_low8 << 4;
  data_0 = data_0 | temp_high4;

  
 1: data_0 = buffer[0] << 4 | buffer[1] >> 4;
 2: data_1 = ((buffer[1] & 0x0F) << 8) | (buffer[2]);
 3: data_2 = (buffer[3] << 4) | buffer[4] >> 4;
  

  data_0 = EVEN_NUM(0);
  data_1 = ODD_NUM(1);
  data_2 = EVEN_NUM(3);
  */

  data = (uint16_t*)malloc(sizeof(uint16_t) * lSize);
  

  for(i=0; count<lSize; i++)
  {
      oldcount = count;
      if(i%2 == 0)
      {
          data[i] = EVEN_NUM(count);
          count+=1;
      }
      else
      {
          data[i] = ODD_NUM(count);
          count+=2;
      }   
      
      printf("\n data[%d]:%x Count:%d",i,data[i], oldcount);
  }

  
  /*
  printf("\n temp_low8:%x ",temp_low8);
  printf("\n temp_hight4:%x ",temp_high4);
  printf("\n data_0:%d ",data_0);
  printf("\n data_1:%d ",data_1);
  printf("\n data_2:%d ",data_2);
  */

  // terminate
  fclose (pFile);
  free (buffer);
  return 0;

}

#endif